'''
transpose_fastas.py - transpose fastas
generated by align_mt_fasta_maf.py into
a single file

run from project root dir
'''

import argparse
import os
import glob
from tqdm import tqdm
from Bio import SeqIO

def args():
    parser = argparse.ArgumentParser(description = 'transpose_fastas.py',
                                     usage = 'transpose_fastas.py [options]')

    parser.add_argument('-d', '--directory', required = True,
                        type = str, help = 'Directory containing files.')
    parser.add_argument('-o', '--outfile', required = True,
                        type = str, help = 'File to write to.')

    args = parser.parse_args()

    return args.directory, args.outfile

def transpose_fastas(alignment_files, outfile):
    with open(outfile, 'w') as f:
        first_iteration = True
        for fname in tqdm(alignment_files):
            basename = fname.split('/')[-1].split('.')[0]
            start, end = [int(num) for num 
                          in basename.split('_')[-1].split('-')]
            seqs = [s for s in SeqIO.parse(fname, 'fasta')]

            # on first iteration
            # create counter and add column names
            if first_iteration:
                strains = [s.id.split('|')[0] for s in seqs]
                f.write('position ' + ' '.join(strains) + '\n')

            relative_position = 0 # this counter will not increment for mt+ gaps
            for i in range(len(seqs[0].seq)):
                if not seqs[0].seq[i] == '-':
                    line_out = [str(relative_position + start + 1)] # origin one position

                    for s in seqs:
                        line_out.extend(s.seq[i])

                    f.write(' '.join(line_out) + '\n')
                    relative_position += 1
                elif seqs[0].seq[i] == '-':
                    continue
            
            first_iteration = False

def main():
    directory, outfile = args()

    # create filename list to iterate over
    if not directory.endswith('/'):
        directory += '/'
    fnames = sorted(glob.glob(directory + '*fasta'))
    
    transpose_fastas(fnames, outfile)

if __name__ == '__main__':
    main()

        
